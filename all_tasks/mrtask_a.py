from mrjob.job import MRJob
from mrjob.step import MRStep
import sys

# 1.	Which vendors have the most trips, and what is the total revenue generated by that vendor?

INDEX_VendorID = 0
INDEX_total_amount = 16

class MapReduce_Task_A(MRJob):

	def steps(self):
		return [
			MRStep(mapper=self.mapper, reducer=self.reducer),
			MRStep(reducer=self.reducer_maxTrips)
		]
	
	def mapper(_self, _, line):
		# Input value is each record line
		
		# Skip header line
		if not line.startswith('VendorID'):
			data = line.strip().split(',')
        
			# Output Key is VendorID and value is tuple having two value - revenue, and trip count i.e. 1
			yield data[INDEX_VendorID], (float(data[INDEX_total_amount]), 1)
		
	def reducer(_self, VendorID, tuple_value):
		# Input Key is VendorID and value is tuple having two value - revenue, and trip count i.e. 1
		sum_revenue, sum_count = (sum(x) for x in zip(*tuple_value))
		
		# Output is None, and value is tuple having three value - Total Trips, VendorID and Total Revenue
		yield(None, (sum_count, VendorID, sum_revenue))
	
	def reducer_maxTrips(_self, _, tuple_value):
		# Finding the VendorID and Revenue with maxiumum Trips
		Vendor_Trips, VendorID, Vendor_Revenue = max(tuple_value)
		
		# Output Key is VendorID and value is Revenue having maximum Trips
		yield(VendorID, Vendor_Revenue)

if __name__ == '__main__':
    MapReduce_Task_A.run()
